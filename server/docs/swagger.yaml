basePath: /api/v1
definitions:
  config.ConnectionStats:
    properties:
      idle_connections:
        type: integer
      in_use_connections:
        type: integer
      max_idle_closed:
        type: integer
      max_idle_time_closed:
        type: integer
      max_lifetime_closed:
        type: integer
      open_connections:
        type: integer
      wait_count:
        type: integer
      wait_duration:
        type: integer
    type: object
  controller.ApplicationHealthStatus:
    properties:
      config_loaded:
        type: boolean
      goroutines:
        type: integer
      memory:
        $ref: '#/definitions/controller.MemoryStats'
      services_ready:
        type: boolean
      start_time:
        type: string
      status:
        type: string
    type: object
  controller.DatabaseHealthStatus:
    properties:
      last_checked:
        type: string
      message:
        type: string
      response_time_ms:
        type: integer
      status:
        type: string
    type: object
  controller.DependencyHealthStatus:
    properties:
      last_checked:
        type: string
      message:
        type: string
      name:
        type: string
      response_time_ms:
        type: integer
      status:
        type: string
    type: object
  controller.DetailedHealthResponse:
    properties:
      application:
        $ref: '#/definitions/controller.ApplicationHealthStatus'
      checks:
        items:
          $ref: '#/definitions/controller.HealthCheck'
        type: array
      connection_stats:
        $ref: '#/definitions/config.ConnectionStats'
      database:
        $ref: '#/definitions/controller.DatabaseHealthStatus'
      dependencies:
        items:
          $ref: '#/definitions/controller.DependencyHealthStatus'
        type: array
      request_id:
        type: string
      status:
        type: string
      timestamp:
        type: string
      uptime:
        type: integer
      version:
        type: string
    type: object
  controller.HealthCheck:
    properties:
      critical:
        type: boolean
      duration_ms:
        type: integer
      message:
        type: string
      name:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  controller.HealthResponse:
    properties:
      application:
        $ref: '#/definitions/controller.ApplicationHealthStatus'
      connection_stats:
        $ref: '#/definitions/config.ConnectionStats'
      database:
        $ref: '#/definitions/controller.DatabaseHealthStatus'
      dependencies:
        items:
          $ref: '#/definitions/controller.DependencyHealthStatus'
        type: array
      request_id:
        type: string
      status:
        type: string
      timestamp:
        type: string
      uptime:
        type: integer
      version:
        type: string
    type: object
  controller.MemoryStats:
    properties:
      alloc_bytes:
        type: integer
      heap_alloc_bytes:
        type: integer
      heap_sys_bytes:
        type: integer
      num_gc:
        type: integer
      sys_bytes:
        type: integer
      total_alloc_bytes:
        type: integer
    type: object
  controller.MetricsResponse:
    properties:
      data: {}
      request_id:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  dto.APIResponse:
    description: Standard API response format with metadata and context information
    properties:
      data:
        description: Response data (varies by endpoint)
      error:
        allOf:
        - $ref: '#/definitions/dto.ErrorResponse'
        description: Error details (only present when success=false)
      meta:
        allOf:
        - $ref: '#/definitions/dto.ResponseMetadata'
        description: Response metadata with request tracking
      pagination:
        allOf:
        - $ref: '#/definitions/dto.PaginationMetadata'
        description: Pagination metadata (for paginated responses)
      success:
        description: Indicates if the request was successful
        example: true
        type: boolean
    type: object
  dto.AssignTagsByNameDTO:
    properties:
      article_id:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - article_id
    - tags
    type: object
  dto.CreateArticleRequest:
    properties:
      category_id:
        type: string
      content:
        type: string
      status:
        enum:
        - draft
        - published
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - category_id
    - content
    - status
    - title
    type: object
  dto.CreateProductAffiliateLinkRequest:
    properties:
      platform_name:
        type: string
      url:
        type: string
    required:
    - platform_name
    - url
    type: object
  dto.CreateProductCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  dto.CreateProductRequest:
    properties:
      description:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      product_category_id:
        type: string
    required:
    - name
    - product_category_id
    type: object
  dto.ErrorResponse:
    description: Error response structure with detailed error information
    properties:
      code:
        description: Error code for programmatic handling
        example: VALIDATION_ERROR
        type: string
      details:
        additionalProperties: true
        description: Additional error details
        type: object
      message:
        description: Human-readable error message
        example: Invalid input data
        type: string
      request_id:
        description: Request ID for tracking
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      timestamp:
        description: Error timestamp
        example: "2025-07-24T20:43:16.123456789+07:00"
        type: string
    type: object
  dto.LoginDto:
    properties:
      identifier:
        type: string
      password:
        type: string
    required:
    - identifier
    type: object
  dto.PaginationMetadata:
    description: Pagination metadata for paginated responses
    properties:
      has_next:
        description: Whether there is a next page
        example: true
        type: boolean
      has_prev:
        description: Whether there is a previous page
        example: false
        type: boolean
      limit:
        description: Number of items per page
        example: 10
        type: integer
      page:
        description: Current page number (1-based)
        example: 1
        type: integer
      request_id:
        description: Request ID for tracking
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      total:
        description: Total number of items
        example: 100
        type: integer
      total_pages:
        description: Total number of pages
        example: 10
        type: integer
    type: object
  dto.ProductAffiliateLinkResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      platform_name:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  dto.ProductCategoryResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  dto.ProductListResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      product_category:
        $ref: '#/definitions/dto.ProductCategoryResponse'
      product_category_id:
        type: string
      updated_at:
        type: string
    type: object
  dto.ProductResponse:
    properties:
      affiliate_links:
        items:
          $ref: '#/definitions/dto.ProductAffiliateLinkResponse'
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      product_category:
        $ref: '#/definitions/dto.ProductCategoryResponse'
      product_category_id:
        type: string
      updated_at:
        type: string
    type: object
  dto.ResponseMetadata:
    description: Response metadata containing request tracking and performance information
    properties:
      processing_time_ms:
        description: Request processing time in nanoseconds
        example: 15000000
        type: integer
      request_id:
        description: Unique request identifier for tracking
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      timestamp:
        description: Response generation timestamp
        example: "2025-07-24T20:43:16.123456789+07:00"
        type: string
      version:
        description: API version
        example: 1.0.0
        type: string
    type: object
  dto.UpdateArticleRequest:
    properties:
      category_id:
        type: string
      content:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  dto.UpdateCategoryRequest:
    properties:
      name:
        type: string
    type: object
  dto.UpdateProductAffiliateLinkRequest:
    properties:
      platform_name:
        type: string
      url:
        type: string
    type: object
  dto.UpdateProductCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  dto.UpdateProductRequest:
    properties:
      description:
        type: string
      image_url:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      product_category_id:
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  model.Article:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      category_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      slug:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/model.Tags'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
      views:
        type: integer
    type: object
  model.Bookmark:
    properties:
      article:
        $ref: '#/definitions/model.Article'
      article_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Comment:
    properties:
      article:
        $ref: '#/definitions/model.Article'
      article_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.Likes:
    properties:
      article:
        $ref: '#/definitions/model.Article'
      article_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.Tags:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:4300
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: REST API untuk aplikasi blog Develapar dengan fitur lengkap untuk manajemen
    artikel, komentar, kategori, tag, bookmark, dan like. API menggunakan standard
    response format dengan metadata, request tracking, rate limiting, dan comprehensive
    error handling.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Develapar API
  version: "1.0"
paths:
  /article-tags/{article_id}:
    get:
      description: Get a list of tags associated with a specific article ID
      parameters:
      - description: ID of the article to retrieve tags for
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tags for the article
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    tags:
                      items:
                        $ref: '#/definitions/model.Tags'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get tags by article ID
      tags:
      - Article Tags
    post:
      consumes:
      - application/json
      description: Assigns a list of tags (by name) to a specific article
      parameters:
      - description: ID of the article
        in: path
        name: article_id
        required: true
        type: integer
      - description: List of tag names
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.AssignTagsByNameDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Tags assigned successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    tags:
                      items:
                        $ref: '#/definitions/model.Tags'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Assign tags to an article by tag names
      tags:
      - Article Tags
  /article-tags/{article_id}/{tag_id}:
    delete:
      description: Remove a specific tag from an article by their IDs
      parameters:
      - description: ID of the article
        in: path
        name: article_id
        required: true
        type: integer
      - description: ID of the tag to remove
        in: path
        name: tag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tag removed from article successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID or tag ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Remove a tag from an article
      tags:
      - Article Tags
  /articles:
    get:
      description: Get a list of all blog articles
      produces:
      - application/json
      responses:
        "200":
          description: List of articles
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all articles
      tags:
      - Articles
    post:
      consumes:
      - application/json
      description: Create a new blog article with tags
      parameters:
      - description: Article creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Article successfully created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    article:
                      $ref: '#/definitions/model.Article'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new article
      tags:
      - Articles
  /articles/{article_id}:
    delete:
      description: Delete an article by ID
      parameters:
      - description: ID of the article to delete
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Article deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "403":
          description: Forbidden (user does not own the article)
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Article not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete an article
      tags:
      - Articles
    put:
      consumes:
      - application/json
      description: Update an existing article by ID
      parameters:
      - description: ID of the article to update
        in: path
        name: article_id
        required: true
        type: integer
      - description: Article update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Article updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    article:
                      $ref: '#/definitions/model.Article'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID or payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "403":
          description: Forbidden (user does not own the article)
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Article not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update an article
      tags:
      - Articles
  /articles/{slug}:
    get:
      description: Get article details by its slug
      parameters:
      - description: Slug of the article to retrieve
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Article details
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    article:
                      $ref: '#/definitions/model.Article'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid slug
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Article not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get article by slug
      tags:
      - Articles
  /articles/author/{user_id}:
    get:
      description: Get a list of articles by a specific user ID
      parameters:
      - description: ID of the user whose articles to retrieve
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of articles by user
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get articles by user ID
      tags:
      - Articles
  /articles/author/{user_id}/paginated:
    get:
      description: Get a paginated list of articles by a specific user ID
      parameters:
      - description: ID of the user whose articles to retrieve
        in: path
        name: user_id
        required: true
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of articles by user
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "400":
          description: Invalid user ID or pagination parameters
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get articles by user ID with pagination
      tags:
      - Articles
  /articles/category/{category_name}:
    get:
      description: Get a list of articles by category name
      parameters:
      - description: Name of the category to retrieve articles from
        in: path
        name: category_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of articles by category
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid category name
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get articles by category name
      tags:
      - Articles
  /articles/category/{category_name}/paginated:
    get:
      description: Get a paginated list of articles by category name
      parameters:
      - description: Name of the category to retrieve articles from
        in: path
        name: category_name
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of articles by category
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "400":
          description: Invalid pagination parameters
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get articles by category name with pagination
      tags:
      - Articles
  /articles/paginated:
    get:
      description: Get a paginated list of all blog articles
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of articles
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "400":
          description: Invalid pagination parameters
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all articles with pagination
      tags:
      - Articles
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: Login credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: Success Login
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    access_token:
                      type: string
                    message:
                      type: string
                    refresh_token:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid request payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Invalid credentials
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: User login
      tags:
      - Authentication
  /auth/refresh:
    post:
      description: Refresh access token using refresh token from cookie
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    access_token:
                      type: string
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Refresh token not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, and password
      parameters:
      - description: User registration details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    user:
                      $ref: '#/definitions/model.User'
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "409":
          description: User already exists
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Register a new user
      tags:
      - Authentication
  /bookmarks:
    delete:
      consumes:
      - application/json
      description: Delete a bookmark for an article by article ID
      parameters:
      - description: Article ID to unbookmark
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Bookmark deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete a bookmark
      tags:
      - Bookmarks
    post:
      consumes:
      - application/json
      description: Create a new bookmark for an article
      parameters:
      - description: Bookmark creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.Bookmark'
      produces:
      - application/json
      responses:
        "201":
          description: Bookmark successfully created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    bookmark:
                      $ref: '#/definitions/model.Bookmark'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new bookmark
      tags:
      - Bookmarks
  /bookmarks/{user_id}:
    get:
      description: Get a list of bookmarks for a specific user ID
      parameters:
      - description: ID of the user whose bookmarks to retrieve
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of bookmarks for the user
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    bookmarks:
                      items:
                        $ref: '#/definitions/model.Bookmark'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get bookmarks by user ID
      tags:
      - Bookmarks
  /bookmarks/check:
    get:
      description: Check if a specific article is bookmarked by the authenticated
        user
      parameters:
      - description: ID of the article to check
        in: query
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Bookmark status
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    bookmarked:
                      type: boolean
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Check if an article is bookmarked by the current user
      tags:
      - Bookmarks
  /categories:
    get:
      description: Get a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    categories:
                      items:
                        $ref: '#/definitions/model.Category'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category with a given name
      parameters:
      - description: Category creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Category successfully created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    category:
                      $ref: '#/definitions/model.Category'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Categories
  /categories/{category_id}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: ID of the category to delete
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid category ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - Categories
    get:
      description: Get category details by its ID
      parameters:
      - description: ID of the category to retrieve
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category details
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    category:
                      $ref: '#/definitions/model.Category'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid category ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Category not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update an existing category by ID
      parameters:
      - description: ID of the category to update
        in: path
        name: category_id
        required: true
        type: integer
      - description: Category update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    category:
                      $ref: '#/definitions/model.Category'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid category ID or payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - Categories
  /comments:
    post:
      consumes:
      - application/json
      description: Create a new comment on an article
      parameters:
      - description: Comment creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Comment successfully created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    comment:
                      $ref: '#/definitions/model.Comment'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new comment
      tags:
      - Comments
  /comments/{comment_id}:
    delete:
      description: Delete a comment by ID
      parameters:
      - description: ID of the comment to delete
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid comment ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update an existing comment by ID
      parameters:
      - description: ID of the comment to update
        in: path
        name: comment_id
        required: true
        type: integer
      - description: Comment update details
        in: body
        name: payload
        required: true
        schema:
          properties:
            content:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Comment updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "403":
          description: Forbidden (user does not own the comment)
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update a comment
      tags:
      - Comments
  /comments/article/{article_id}:
    get:
      description: Get a list of comments for a specific article ID
      parameters:
      - description: ID of the article to retrieve comments for
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of comments for the article
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    comments:
                      items:
                        $ref: '#/definitions/model.Comment'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get comments by article ID
      tags:
      - Comments
  /comments/user/{user_id}:
    get:
      description: Get a list of comments by a specific user ID
      parameters:
      - description: ID of the user whose comments to retrieve
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of comments by the user
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    comments:
                      items:
                        $ref: '#/definitions/model.Comment'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get comments by user ID
      tags:
      - Comments
  /health:
    get:
      consumes:
      - application/json
      description: Get comprehensive application and database health status with context
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/controller.HealthResponse'
      summary: Health check endpoint
      tags:
      - health
  /health/database:
    get:
      consumes:
      - application/json
      description: Get detailed database connection pool statistics with context
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.ConnectionStats'
      summary: Database connection pool statistics
      tags:
      - health
  /health/detailed:
    get:
      consumes:
      - application/json
      description: Get comprehensive health information with individual check results
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.DetailedHealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/controller.DetailedHealthResponse'
      summary: Detailed health check endpoint
      tags:
      - health
  /likes:
    delete:
      consumes:
      - application/json
      description: Remove a like from a specific article by the authenticated user
      parameters:
      - description: Article ID to unlike
        in: body
        name: payload
        required: true
        schema:
          properties:
            article_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Like deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Remove a like from an article
      tags:
      - Likes
    post:
      consumes:
      - application/json
      description: Add a like to a specific article by the authenticated user
      parameters:
      - description: Like creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.Likes'
      produces:
      - application/json
      responses:
        "201":
          description: Like successfully added
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    like:
                      $ref: '#/definitions/model.Likes'
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Add a like to an article
      tags:
      - Likes
  /likes/article/{article_id}:
    get:
      description: Get a list of likes for a specific article ID
      parameters:
      - description: ID of the article to retrieve likes for
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of likes for the article
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    likes:
                      items:
                        $ref: '#/definitions/model.Likes'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get likes by article ID
      tags:
      - Likes
  /likes/check:
    get:
      description: Check if a specific article is liked by the authenticated user
      parameters:
      - description: ID of the article to check
        in: query
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Like status
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    liked:
                      type: boolean
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Check if an article is liked by the current user
      tags:
      - Likes
  /likes/user/{user_id}:
    get:
      description: Get a list of likes by a specific user ID
      parameters:
      - description: ID of the user whose likes to retrieve
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of likes by the user
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    likes:
                      items:
                        $ref: '#/definitions/model.Likes'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get likes by user ID
      tags:
      - Likes
  /metrics:
    get:
      consumes:
      - application/json
      description: Get comprehensive application metrics including request, database,
        application, and error metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Get all application metrics
      tags:
      - metrics
  /metrics/application:
    get:
      consumes:
      - application/json
      description: Get application-level metrics including memory usage, goroutine
        count, and uptime
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Get application metrics
      tags:
      - metrics
  /metrics/database:
    get:
      consumes:
      - application/json
      description: Get database performance metrics including query times, connection
        pool stats, and error rates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Get database metrics
      tags:
      - metrics
  /metrics/errors:
    get:
      consumes:
      - application/json
      description: Get error tracking metrics including error rates, error types,
        and error distribution
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Get error metrics
      tags:
      - metrics
  /metrics/requests:
    get:
      consumes:
      - application/json
      description: Get HTTP request metrics including latency, throughput, and status
        code distribution
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Get request metrics
      tags:
      - metrics
  /metrics/reset:
    post:
      consumes:
      - application/json
      description: Reset all collected metrics to zero (useful for testing or periodic
        resets)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Reset all metrics
      tags:
      - metrics
  /metrics/summary:
    get:
      consumes:
      - application/json
      description: Get a high-level summary of key metrics for dashboard display
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MetricsResponse'
      summary: Get metrics summary
      tags:
      - metrics
  /product-categories:
    get:
      description: Get a paginated list of all product categories
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    product_categories:
                      items:
                        $ref: '#/definitions/dto.ProductCategoryResponse'
                      type: array
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all product categories with pagination
      tags:
      - Product Categories
    post:
      consumes:
      - application/json
      description: Create a new product category with name, slug, and description
      parameters:
      - description: Product category creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_category:
                      $ref: '#/definitions/dto.ProductCategoryResponse'
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new product category
      tags:
      - Product Categories
  /product-categories/{id}:
    delete:
      description: Delete a product category by ID
      parameters:
      - description: Product Category ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid product category ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product category not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete product category
      tags:
      - Product Categories
    get:
      description: Get a specific product category by its UUID
      parameters:
      - description: Product Category ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_category:
                      $ref: '#/definitions/dto.ProductCategoryResponse'
                  type: object
              type: object
        "400":
          description: Invalid product category ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product category not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get product category by ID
      tags:
      - Product Categories
    put:
      consumes:
      - application/json
      description: Update an existing product category by ID
      parameters:
      - description: Product Category ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Product category update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_category:
                      $ref: '#/definitions/dto.ProductCategoryResponse'
                  type: object
              type: object
        "400":
          description: Invalid payload or ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product category not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update product category
      tags:
      - Product Categories
  /product-categories/s/{slug}:
    get:
      description: Get a specific product category by its slug
      parameters:
      - description: Product Category Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_category:
                      $ref: '#/definitions/dto.ProductCategoryResponse'
                  type: object
              type: object
        "400":
          description: Invalid slug
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product category not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get product category by slug
      tags:
      - Product Categories
  /products:
    get:
      description: Get a paginated list of all products
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    products:
                      items:
                        $ref: '#/definitions/dto.ProductListResponse'
                      type: array
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all products with pagination
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with category, name, description, and image
      parameters:
      - description: Product creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product:
                      $ref: '#/definitions/dto.ProductResponse'
                  type: object
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete a product by ID
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid product ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - Products
    get:
      description: Get a specific product by its UUID including affiliate links
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product:
                      $ref: '#/definitions/dto.ProductResponse'
                  type: object
              type: object
        "400":
          description: Invalid product ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product by ID
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Product update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product:
                      $ref: '#/definitions/dto.ProductResponse'
                  type: object
              type: object
        "400":
          description: Invalid payload or ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - Products
  /products/{id}/affiliate:
    get:
      description: Get all affiliate links for a specific product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_affiliate_links:
                      items:
                        $ref: '#/definitions/dto.ProductAffiliateLinkResponse'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid product ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Get affiliate links by product ID
      tags:
      - Product Affiliate Links
    post:
      consumes:
      - application/json
      description: Create a new affiliate link for a specific product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Affiliate link creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductAffiliateLinkRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_affiliate_link:
                      $ref: '#/definitions/dto.ProductAffiliateLinkResponse'
                  type: object
              type: object
        "400":
          description: Invalid payload or product ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create product affiliate link
      tags:
      - Product Affiliate Links
  /products/{id}/affiliate/{affiliateId}:
    delete:
      description: Delete an affiliate link by ID
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Affiliate Link ID (UUID)
        in: path
        name: affiliateId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid affiliate ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Affiliate link not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete product affiliate link
      tags:
      - Product Affiliate Links
    put:
      consumes:
      - application/json
      description: Update an existing affiliate link for a product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Affiliate Link ID (UUID)
        in: path
        name: affiliateId
        required: true
        type: string
      - description: Affiliate link update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductAffiliateLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    product_affiliate_link:
                      $ref: '#/definitions/dto.ProductAffiliateLinkResponse'
                  type: object
              type: object
        "400":
          description: Invalid payload, product ID, or affiliate ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product or affiliate link not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update product affiliate link
      tags:
      - Product Affiliate Links
  /products/{id}/article/{articleId}:
    delete:
      description: Remove the association between a product and an article
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Article ID (UUID)
        in: path
        name: articleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid product ID or article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product or article not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Remove product from article
      tags:
      - Product Article Relations
    post:
      description: Associate a product with an article
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Article ID (UUID)
        in: path
        name: articleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid product ID or article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Product or article not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Add product to article
      tags:
      - Product Article Relations
  /products/{id}/articles:
    get:
      description: Get all articles associated with a specific product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid product ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get articles by product ID
      tags:
      - Product Article Relations
  /products/article/{id}:
    get:
      description: Get all products associated with a specific article
      parameters:
      - description: Article ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    products:
                      items:
                        $ref: '#/definitions/dto.ProductListResponse'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid article ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get products by article ID
      tags:
      - Products
  /products/category/{id}:
    get:
      description: Get a paginated list of products filtered by category ID
      parameters:
      - description: Category ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    products:
                      properties:
                        products:
                          items:
                            $ref: '#/definitions/dto.ProductListResponse'
                          type: array
                      type: object
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "400":
          description: Invalid category ID or pagination parameters
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get products by category with pagination
      tags:
      - Products
  /tags:
    get:
      description: Get a list of all tags
      produces:
      - application/json
      responses:
        "200":
          description: List of tags
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    tags:
                      items:
                        $ref: '#/definitions/model.Tags'
                      type: array
                  type: object
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all tags
      tags:
      - Tags
    post:
      consumes:
      - application/json
      description: Create a new tag with a given name
      parameters:
      - description: Tag creation details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.Tags'
      produces:
      - application/json
      responses:
        "201":
          description: Tag successfully created
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Tags'
              type: object
        "400":
          description: Invalid payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Create a new tag
      tags:
      - Tags
  /tags/{tag_id}:
    delete:
      description: Delete a tag by ID
      parameters:
      - description: ID of the tag to delete
        in: path
        name: tag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tag deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid tag ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Tag not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete a tag
      tags:
      - Tags
    get:
      description: Get tag details by its ID
      parameters:
      - description: ID of the tag to retrieve
        in: path
        name: tag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tag details
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    tag:
                      $ref: '#/definitions/model.Tags'
                  type: object
              type: object
        "400":
          description: Invalid tag ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get tag by ID
      tags:
      - Tags
    put:
      consumes:
      - application/json
      description: Update an existing tag by ID
      parameters:
      - description: ID of the tag to update
        in: path
        name: tag_id
        required: true
        type: integer
      - description: Tag update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.Tags'
      produces:
      - application/json
      responses:
        "200":
          description: Tag updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    tag:
                      $ref: '#/definitions/model.Tags'
                  type: object
              type: object
        "400":
          description: Invalid tag ID or payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: Tag not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update a tag
      tags:
      - Tags
  /tags/{tag_id}/articles:
    get:
      description: Get a list of articles associated with a specific tag ID
      parameters:
      - description: ID of the tag to retrieve articles for
        in: path
        name: tag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of articles with the specified tag
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    articles:
                      items:
                        $ref: '#/definitions/model.Article'
                      type: array
                  type: object
              type: object
        "400":
          description: Invalid tag ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get articles by tag ID
      tags:
      - Article Tags
  /users:
    get:
      description: Get a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    users:
                      items:
                        $ref: '#/definitions/model.User'
                      type: array
                  type: object
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all users
      tags:
      - Users
  /users/{user_id}:
    delete:
      description: Delete user account by ID
      parameters:
      - description: ID of the user to delete
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - Users
    get:
      description: Get user details by their ID
      parameters:
      - description: ID of the user to retrieve
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    user:
                      $ref: '#/definitions/model.User'
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - description: ID of the user to update
        in: path
        name: user_id
        required: true
        type: string
      - description: User update details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    user:
                      $ref: '#/definitions/model.User'
                  type: object
              type: object
        "400":
          description: Invalid user ID or payload
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
  /users/paginated:
    get:
      description: Get a paginated list of all registered users
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of users
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                    users:
                      items:
                        $ref: '#/definitions/model.User'
                      type: array
                  type: object
                pagination:
                  $ref: '#/definitions/dto.PaginationMetadata'
              type: object
        "400":
          description: Invalid pagination parameters
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "408":
          description: Request timeout
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/dto.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/dto.ErrorResponse'
              type: object
      summary: Get all users with pagination
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
